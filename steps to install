

 timedatectl set-timezone Asia/Kolkata

1) Set Host Name and Update hosts file
=============================================


# hostnamectl set-hostname "k8s-master.glotechcorp.com"
# hostnamectl set-hostname "k8s-worker01.glotechcorp.com"
# hostnamectl set-hostname "k8s-worker02.glotechcorp.com"
#hostnamectl set-hostname "k8s-worker03.glotech.com"
# exec bash


Make a entry in all machines
# vi /etc/hosts 


192.168.80.128 control-plane
192.168.80.130 worker-01
192.168.80.131 worker-02


2) Disable Swap and Load Kernel Modules
=============================================

# sudo swapoff -a
# sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab (or) # vi /etc/fstab -- comment the swap entry

Install module 
# sudo modprobe overlay;modprobe br_netfilter

To validate the module 
# lsmod|egrep 'overlay|br_netfilter'

# sudo tee /etc/modules-load.d/k8s.conf <<EOF
overlay
br_netfilter
EOF


# sudo tee /etc/sysctl.d/kubernetes.conf <<EOT
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOT


# sysctl --system


3) Install and Configure Containerd
=============================================


Containerd provides the container run time for Kubernetes. So, Install containerd on all Machines.

# sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates



# sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/containerd.gpg
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"


#sudo apt update && sudo apt install containerd.io -y



Next, configure containerd so that it starts using SystemdCgroup. 


#  containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
# sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml


# systemctl restart containerd


4) Add Kubernetes Package Repository
=============================================

Download the public signing key for the Kubernetes package repository using curl command.

# curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/k8s.gpg


# echo 'deb [signed-by=/etc/apt/keyrings/k8s.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/k8s.list


5) Install Kubernetes Components (Kubeadm, kubelet & kubectl)
==========================================================================================


# sudo apt update && apt install kubelet kubeadm kubectl -y

//
# sudo apt install kubelet kubeadm kubectl -y
# apt-mark hold kubeadm kubelet kubectl		--- To hold the version
# apt-mark showhold 	--- To show hold the version
# apt-mark unhold kubeadm kubelet kubectl	-- To unhold the version
//

6) Initialize Kubernetes Cluster (only on master)
=============================================


# sudo kubeadm init --control-plane-endpoint=control-plane

###sudo kubeadm init --apiserver-advertise-address=192.168.122.60 --pod-network-cidr=10.100.0.0/16


# mkdir -p $HOME/.kube
# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# sudo chown $(id -u):$(id -g) $HOME/.kube/config


worker nodes
================
kubeadm join k8s-master.glotech.com:6443 --token 4igbg5.0nln8kycap22t0qf \
        --discovery-token-ca-cert-hash sha256:afec17c198c9e939e5876df30bff54be974d00ca55f88dea1f84421fd330ce89

# kubectl cluster-info
# kubectl get nodes


# kubectl get nodes
# kubectl get pod --all-namespaces


Network
=========
Calico Network in all node
=================
latest
==========
kubectl apply -f https://github.com/projectcalico/calico/tree/release-v3.29/manifests/calico.yaml


vi calico.yaml

kubectl apply -f calico.yaml


# kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml



$ kubectl get pods -n kube-system
